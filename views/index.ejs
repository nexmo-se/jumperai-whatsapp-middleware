<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Send Message</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT"
      crossorigin="anonymous"
    />
    <link href="https://fonts.googleapis.com/css?family=Oswald:400,300,700" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="/utils.js"></script>
    <script>
      function handleShowOptions(e) {
        const channelSelected = e.target.value;
        const templateContainer = document.getElementById('templateContainer');
        if (channelSelected != 'whatsapp') {
          templateContainer.style.display = 'none';
        } else {
          document.getElementById('sendTemplate').addEventListener('click', sendTemplate);
          templateContainer.style.display = 'block';
        }
        if (channelSelected != 'sms') {
          sender.style.display = 'none';
        } else {
          sender.style.display = 'block';
        }
      }
      async function sendTemplate(e) {
        console.log('sending template');

        e.preventDefault();
        const parameters = {};
        const buttonsParamArray = [];
        const headerParameters = {};
        const urlObject = {};
        const headerParamDiv = document.getElementById('inputHeaderParams');
        const parametersBody = document.getElementById('inputParamdiv');
        const buttonsParam = document.getElementById('inputButtonDiv');
        const templateLang = document.getElementById('templateLanguage');
        const documentName = document.getElementById('documentname');
        const templateLanguage = templateLang?.innerText;
        const template = document.getElementById('templateName');
        const to = document.getElementById('toField').innerText;

        const templateName = template?.innerText;
        const imageUrl = document.getElementById('IMAGEUrl');
        const videoUrl = document.getElementById('VIDEOUrl');
        const fileUrl = document.getElementById('DOCUMENTUrl');
        let docName;
        let typeUrl;
        let mediaUrl;

        if (imageUrl !== null) {
          mediaUrl = imageUrl?.value;
          urlObject['type'] = 'IMAGE';
        }

        if (videoUrl !== null) {
          mediaUrl = videoUrl?.value;
          urlObject['type'] = 'VIDEO';
        }
        if (fileUrl !== null) {
          mediaUrl = fileUrl?.value;
          urlObject['type'] = 'DOCUMENT';
          docName = documentName.value;
        }

        try {
          console.log(mediaUrl);

          if (mediaUrl) {
            urlObject['headerUrl'] = mediaUrl;
          }
          if (headerParamDiv.childElementCount) {
            for (let i = 1; i <= headerParamDiv.childElementCount; i++) {
              headerParameters[`param${i}`] = document.getElementById(`headerParam${i}`)?.value;
            }
          }
          if (parametersBody.childElementCount) {
            for (let i = 1; i <= parametersBody.childElementCount; i++) {
              console.log('iteration ' + i);
              console.log(parametersBody.childElementCount);

              parameters[`param${i}`] = document.getElementById(`parameter${i}`)?.value;
            }
          }
          if (buttonsParam?.childElementCount) {
            for (let i = 0; i < buttonsParam.childElementCount; i++) {
              console.log(buttonsParam.childElementCount);
              const emptyButtonsObject = {};
              emptyButtonsObject[`button${i}`] = document.getElementById(`button${i}`)?.value;
              const buttonName = document.getElementById(`button${i}`)?.name;
              if (buttonName.startsWith('QUICK_REPLY')) {
                const [type, payload] = buttonName.split(':');
                emptyButtonsObject['type'] = type;
                emptyButtonsObject['payload'] = payload;
                buttonsParamArray.push(emptyButtonsObject);
              } else {
                emptyButtonsObject['type'] = buttonName;
                buttonsParamArray.push(emptyButtonsObject);
              }
            }
          }
          const url = '/send-template';
          const fetchOptions = {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
            },
            body: JSON.stringify({
              params: parameters,
              to: to,
              name: templateName,
              id: templateLanguage,
              urlObject,
              buttonsParamArray,
              docName,
            }),
          };

          const response = await fetch(url, fetchOptions);
          const respJson = await response.json();

          const body = document.getElementById('toast-template');
          body.innerText = response.status === 200 ? 'Message processed' : 'Something went wrong';
          new bootstrap.Toast(document.querySelector('#toastTemplate')).show();
          if (!response.ok) {
            const errorMessage = await response.text();
            throw new Error(errorMessage);
          }
        } catch (e) {
          console.log(e);
        }
      }

      async function handleSubmit(event) {
        const body = document.getElementById('toast-body');
        try {
          event.preventDefault();
          const to = document.getElementById('toField').innerText;
          const userId = document.getElementById('userId').innerText;
          const text = document.getElementById('text').value;
          const channel = document.getElementById('inputChannel').value;
          const sender = document.getElementById('senderId').value;

          const data = { to, text, channel, sender, userId };
          const fetchOptions = {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Accept: 'application/json',
            },
            body: JSON.stringify(data),
          };

          const form = event.currentTarget;
          const url = form.action;

          const responseData = await fetch(url, fetchOptions);
          if (responseData.ok) {
            const respJson = await responseData.json();

            body.innerText = responseData.status;
            new bootstrap.Toast(document.querySelector('#toastBasic')).show();
            window.parent.postMessage(JSON.stringify({ action: 'DONE' }), '*');
            return;
          }
          const respError = await responseData.json();

          throw new Error(respError.error);
        } catch (error) {
          console.log(error);
          body.innerText = error;
          new bootstrap.Toast(document.querySelector('#toastBasic')).show();
        }
      }

      const getTemplates = async () => {
        const fetchOptions = {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        };
        const url = '/templates';
        const responseData = await fetch(url, fetchOptions);
        const respJson = await responseData.json();
        return respJson;
      };

      async function fetchTemplateDetails(id) {
        console.log('fetching template');

        const fetchOptions = {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Accept: 'application/json',
          },
        };
        const url = `/templates/${id}`;
        const responseData = await fetch(url, fetchOptions);
        const respJson = await responseData.json();

        return respJson.data;
      }

      function changeTemplate(numberParams, templateText, header, headerParams) {
        const preview = document.getElementById('preview');
        let prev = templateText;
        let prevHeader = header;
        for (let i = 1; i <= numberParams; i++) {
          if (document.getElementById(`parameter${i}`).value !== '' && prev) {
            prev = prev?.replace(`{{${i}}}`, `{{${document.getElementById(`parameter${i}`).value}}}`);
            preview.placeholder = `${header || ''}\n${prev}`;
          }
        }

        for (let i = 1; i <= headerParams; i++) {
          if (document.getElementById(`headerParam${i}`).value !== '' && prevHeader) {
            header = header?.replace(`{{${i}}}`, `{{${document.getElementById(`headerParam${i}`).value}}}`);
            preview.placeholder = `${header}\n${prev}`;
          }
        }
        prev = templateText;
        prevHeader = header;
      }
      const buildTemplate = () => {
        getTemplates().then((templateData) => {
          buildOptions(templateData.data);
          document.getElementById('inputGroupSelect01').addEventListener('change', function (event) {
            clearHeader();
            clearBody();
            clearButtons();
            clearSettings();
            const template = templateData.data.find((template) => template.template_name === event.target.value);
            if (!template || !template.templates[0]) return;
            fetchTemplateDetails(template.templates[0].id).then((template) => {
              console.log(template);
              const { bodyParams, header, urlNeeded, quickReplies, buttons, urlButtons, buttonsArray } = formatTemplateJumper(template);
              buildTemplateSettings(template.template_name, template.id);
              buildParamsBody(template.message.BODY.text, bodyParams, template.message?.HEADER?.text);
              buildHeader(header, 0, template.message?.HEADER?.text, urlNeeded);
              buildButtons(buttonsArray);

              for (let i = 1; i <= bodyParams; i++) {
                document.getElementById(`parameter${i}`).addEventListener('keyup', (e) => {
                  const preview = document.getElementById('preview');
                  let previewText = document.getElementById('preview').placeholder;
                  changeTemplate(bodyParams, template.message.BODY.text, template.message?.HEADER?.text, 0);
                });
              }
            });
          });
        });
      };
    </script>
  </head>
  <body style="background-color: rgb(251, 248, 248)" class="custom-activity d-flex justify-content-center">
    <div class="step container mt-4 text-bg-light shadow p-3 mb-5 bg-body-tertiary rounded">
      <div class="row">
        <div class="col">
          <div style="display: flex">
            <img
              class="mt-3"
              width="40px"
              height="50px"
              style="margin-right: 35px"
              src="https://jumper.ai/landing/resources/images/jumper-logo-256x256.png"
              alt=""
            />
            <h1 class="row mt-3">WhatsApp templates by Jumper AI (Vonage)</h1>
          </div>
          <form id="mainForm" method="post" action="/sendMessage">
            <div id="toastBasic" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">Message Result</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div id="toast-body" class="toast-body">Hello, world! This is a toast message.</div>
            </div>
            <div class="mb-3">
              <div style="margin-top: 15px" class="input-group mb-3">
                <div class="input-group-prepend">
                  <label class="input-group-text" for="inputChannel">Channel</label>
                </div>
                <select class="custom-select" id="inputChannel">
                  <option selected value="whatsapp">WHATSAPP</option>
                </select>
              </div>
              <label for="toField" class="form-label"
                >To:
                <span style="color: rgb(203, 144, 144)" id="toField"><%= to %></span>
              </label>
            </div>
          </form>

          <div id="templateContainer" style="margin-top: 30px" class="mb-2">
            <div id="toastTemplate" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
              <div class="toast-header">
                <strong class="me-auto">Message Result</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
              </div>
              <div id="toast-template" class="toast-body">Hello, world! This is a toast message.</div>
            </div>
            <div id="templates"></div>
            <button id="sendTemplate" class="btn btn-primary float-start">Send starter template</button>
          </div>
        </div>
      </div>
    </div>

    <script>
      const mainForm = document.getElementById('mainForm');
      // const sender = document.getElementById('senderIdField');
      // const senderId = document.getElementById('senderId');
      mainForm.addEventListener('submit', handleSubmit);
      document.getElementById('sendTemplate')?.addEventListener('click', sendTemplate);
      document.getElementById('inputChannel').addEventListener('change', handleShowOptions);
      window.addEventListener('load', () => {
        const channel = document.getElementById('inputChannel').value;
        if (channel === 'whatsapp') buildTemplate();
        if (channel === 'sms') {
          sender.style.display = 'block';
          senderId.value = '';
        }
      });
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-u1OknCvxWvY5kfmNBILK2hRnQC3Pr17a+RTT6rIHI7NnikvbZlHgTPOOmMi466C8"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
